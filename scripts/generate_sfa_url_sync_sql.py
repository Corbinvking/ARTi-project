#!/usr/bin/env python3
"""
Generate SQL to sync SFA URLs from roster scraping results to spotify_campaigns table
This bypasses Node.js JWT authentication issues
"""

import json
import os
from pathlib import Path
import re

def extract_track_id(url):
    """Extract Spotify track ID from URL"""
    if not url:
        return None
    match = re.search(r'track/([a-zA-Z0-9]+)', url)
    return match.group(1) if match else None

def escape_sql_string(s):
    """Escape single quotes for SQL"""
    if s is None:
        return 'NULL'
    return f"'{s.replace(chr(39), chr(39)+chr(39))}'"

def generate_sql():
    # Find the latest roster scraping results
    data_dir = Path(__file__).parent.parent / 'roster_scraper' / 'data'
    
    result_files = sorted(
        [f for f in data_dir.glob('roster_scraping_results_*.json')],
        reverse=True
    )
    
    if not result_files:
        print("‚ùå No roster scraping results found!")
        return
    
    latest_file = result_files[0]
    print(f"üìñ Reading: {latest_file.name}")
    
    with open(latest_file, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # Extract SFA URLs
    sfa_urls = []
    
    if 'clients' in data:
        for client_name, client_data in data['clients'].items():
            if 'songs' in client_data:
                for song in client_data['songs']:
                    if song.get('sfa_url') and song.get('track_id'):
                        sfa_urls.append({
                            'track_id': song['track_id'],
                            'sfa_url': song['sfa_url'],
                            'song_name': song.get('song_name', 'Unknown'),
                            'artist_name': client_data.get('artist_name', client_name)
                        })
    
    print(f"‚úÖ Found {len(sfa_urls)} SFA URLs to sync\n")
    
    # Generate SQL
    output_file = Path(__file__).parent.parent / 'SYNC-SFA-URLS.sql'
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("-- Sync SFA URLs to spotify_campaigns\n")
        f.write("-- Generated by generate_sfa_url_sync_sql.py\n\n")
        
        for url_data in sfa_urls:
            track_id = url_data['track_id']
            sfa_url = url_data['sfa_url']
            song_name = escape_sql_string(url_data['song_name'])
            artist_name = escape_sql_string(url_data['artist_name'])
            
            f.write(f"-- Update: {artist_name.strip(chr(39))} - {song_name.strip(chr(39))}\n")
            f.write("DO $$\n")
            f.write("DECLARE\n")
            f.write("  v_campaign_id INTEGER;\n")
            f.write("BEGIN\n")
            f.write("  -- Find campaign by track ID in url or sfa column\n")
            f.write("  SELECT id INTO v_campaign_id\n")
            f.write("  FROM spotify_campaigns\n")
            f.write(f"  WHERE url LIKE '%{track_id}%' OR sfa LIKE '%{track_id}%'\n")
            f.write("  LIMIT 1;\n\n")
            f.write("  IF v_campaign_id IS NOT NULL THEN\n")
            f.write("    -- Update the SFA URL\n")
            f.write("    UPDATE spotify_campaigns\n")
            f.write(f"    SET sfa = '{sfa_url}',\n")
            f.write("        updated_at = NOW()\n")
            f.write("    WHERE id = v_campaign_id\n")
            f.write(f"      AND (sfa IS NULL OR sfa != '{sfa_url}');\n")
            f.write("    \n")
            f.write("    IF FOUND THEN\n")
            f.write(f"      RAISE NOTICE 'Updated campaign %: % - %', v_campaign_id, {artist_name}, {song_name};\n")
            f.write("    END IF;\n")
            f.write("  ELSE\n")
            f.write(f"    RAISE NOTICE 'Campaign not found for track: %', '{track_id}';\n")
            f.write("  END IF;\n")
            f.write("END $$;\n\n")
    
    print(f"‚úÖ Generated SQL file: {output_file.name}")
    print(f"\nüìã Next Steps:")
    print(f"1. Upload to production: scp {output_file.name} root@164.90.129.146:/root/arti-marketing-ops/")
    print(f"2. Run on production: psql postgresql://postgres:postgres@127.0.0.1:54322/postgres -f {output_file.name}")

if __name__ == '__main__':
    generate_sql()

