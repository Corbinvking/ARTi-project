#!/bin/bash

# ARTi Platform Production Deployment Script
# Domain: artistinfluence.com

set -e

echo "🚀 ARTi Platform Production Deployment"
echo "Domain: artistinfluence.com"
echo "========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   print_error "This script must be run as root"
   exit 1
fi

# Validate environment
print_step "Validating environment..."

if [ ! -f "apps/api/.env" ]; then
    print_error "Backend environment file apps/api/.env not found!"
    print_warning "Please create it from apps/api/environment.template"
    exit 1
fi

if [ ! -f "caddy/Caddyfile.production" ]; then
    print_error "Production Caddyfile not found!"
    exit 1
fi

print_status "Environment validation complete ✅"

# Install dependencies
print_step "Installing system dependencies..."

# Update system
apt update && apt upgrade -y

# Install Docker if not installed
if ! command -v docker &> /dev/null; then
    print_status "Installing Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    rm get-docker.sh
else
    print_status "Docker already installed ✅"
fi

# Install Docker Compose if not installed
if ! command -v docker-compose &> /dev/null; then
    print_status "Installing Docker Compose..."
    apt install docker-compose-plugin -y
else
    print_status "Docker Compose already installed ✅"
fi

# Create log directories
print_step "Setting up logging directories..."
mkdir -p /var/log/caddy
chmod 755 /var/log/caddy
print_status "Log directories created ✅"

# Set up firewall
print_step "Configuring firewall..."
ufw --force enable
ufw allow ssh
ufw allow 80
ufw allow 443
print_status "Firewall configured ✅"

# Build and start services
print_step "Building and starting services..."

# Build the API image
print_status "Building API container..."
docker build -t arti-api-prod ./apps/api

# Start production services
print_status "Starting production services..."
docker-compose -f docker-compose.production.yml up -d

# Wait for services to start
print_status "Waiting for services to start..."
sleep 30

# Health checks
print_step "Running health checks..."

# Check API health
if curl -f http://localhost:3001/healthz >/dev/null 2>&1; then
    print_status "API health check passed ✅"
else
    print_warning "API health check failed - may still be starting up"
fi

# Check Redis
if docker exec arti-redis-prod redis-cli ping >/dev/null 2>&1; then
    print_status "Redis health check passed ✅"
else
    print_error "Redis health check failed ❌"
fi

# Check n8n
if curl -f http://localhost:5678/healthz >/dev/null 2>&1; then
    print_status "n8n health check passed ✅"
else
    print_warning "n8n health check failed - may still be starting up"
fi

# Check Caddy
if curl -f http://localhost:80 >/dev/null 2>&1; then
    print_status "Caddy health check passed ✅"
else
    print_warning "Caddy health check failed - may still be configuring SSL"
fi

# Display service status
print_step "Service Status:"
docker-compose -f docker-compose.production.yml ps

# Display useful information
echo ""
echo "🎉 Deployment Complete!"
echo "======================="
echo ""
echo "📋 Next Steps:"
echo "1. Configure DNS records for artistinfluence.com:"
echo "   - api.artistinfluence.com  → $(curl -s ifconfig.me)"
echo "   - link.artistinfluence.com → $(curl -s ifconfig.me)"
echo "   - app.artistinfluence.com  → Vercel CNAME"
echo ""
echo "2. Deploy frontend to Vercel with custom domain"
echo "3. Test full deployment:"
echo "   - Frontend: https://app.artistinfluence.com"
echo "   - API: https://api.artistinfluence.com/healthz"
echo "   - n8n: https://link.artistinfluence.com"
echo ""
echo "📊 Monitoring:"
echo "   - Logs: /var/log/caddy/"
echo "   - Status: docker-compose -f docker-compose.production.yml ps"
echo "   - Restart: docker-compose -f docker-compose.production.yml restart"
echo ""
echo "🔐 SSL certificates will be automatically generated by Caddy"
echo "   once DNS records point to this server."
echo ""

print_status "Production deployment script completed! 🚀"
